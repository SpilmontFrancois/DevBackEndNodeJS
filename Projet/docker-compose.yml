version: "3"

services:
  api_prise_commandes:
    container_name: api_prise_commandes
    image: node:lts
    env_file: ./service/api_prise_commandes/.env
    working_dir: /usr/src/app
    volumes:
      - ./service/api_prise_commandes:/usr/src/app
    # ports:
    #   - 3333:3000
    command: npm run watch
    depends_on:
      - db_sandwich
    links:
      - db_sandwich
    networks:
      - sandwich

  api_suivi_commandes:
    container_name: api_suivi_commandes
    image: node:lts
    env_file: ./service/api_suivi_commandes/.env
    working_dir: /usr/src/app
    volumes:
      - ./service/api_suivi_commandes:/usr/src/app
    # ports:
    #   - 3334:3001
    command: npm run watch
    depends_on:
      - db_sandwich
    links:
      - db_sandwich
    networks:
      - sandwich

  api_gateway_back_office:
    container_name: api_gateway_back_office
    image: node:lts
    working_dir: /usr/src/app
    volumes:
      - ./service/api_gateway_back_office:/usr/src/app
    ports:
      - 3335:3002
    command: npm run watch
    depends_on:
      - db_sandwich
    links:
      - db_sandwich
    networks:
      - sandwich

  api_gateway_front_office:
    container_name: api_gateway_front_office
    image: node:lts
    working_dir: /usr/src/app
    volumes:
      - ./service/api_gateway_front_office:/usr/src/app
    ports:
      - 3336:3004
    command: npm run watch
    depends_on:
      - db_sandwich
    links:
      - db_sandwich
    networks:
      - sandwich

  api_auth:
    container_name: api_auth
    image: node:lts
    env_file: ./service/api_auth/.env
    working_dir: /usr/src/app
    volumes:
      - ./service/api_auth:/usr/src/app
    ports:
      - 3337:3003
    command: npm run watch
    depends_on:
      - db_sandwich
    links:
      - db_sandwich
    networks:
      - sandwich

  db_catalogue:
    container_name: db_catalogue
    image: postgres:13
    volumes:
      - ./data/database:/var/lib/postgresql/data
    networks:
      - catalogue
    environment:
      POSTGRES_USER: 'directus'
      POSTGRES_PASSWORD: 'directus'
      POSTGRES_DB: 'default_database'

  cache:
    container_name: cache
    image: redis:6
    networks:
      - catalogue

  directus:
    container_name: directus
    image: directus/directus:latest
    ports:
      - 8055:8055
    volumes:
      # By default, uploads are stored in /directus/uploads
      # Always make sure your volumes matches the storage root when using
      # local driver
      - ./uploads:/directus/uploads
      # Make sure to also mount the volume when using SQLite
      # - ./database:/directus/database
      # If you want to load extensions from the host
      # - ./extensions:/directus/extensions
    networks:
      - catalogue
    depends_on:
      - cache
      - db_catalogue
    environment:
      KEY: '255d861b-5ea1-5996-9aa3-922530ec40b1'
      SECRET: '6116487b-cda1-52c2-b5b5-c8022c45e263'

      DB_CLIENT: 'pg'
      DB_HOST: 'db_catalogue'
      DB_PORT: '5432'
      DB_DATABASE: 'default_database'
      DB_USER: 'directus'
      DB_PASSWORD: 'directus'

      CACHE_ENABLED: 'true'
      CACHE_STORE: 'redis'
      CACHE_REDIS: 'redis://cache:6379'

      ADMIN_EMAIL: 'admin@example.com'
      ADMIN_PASSWORD: 'd1r3ctu5'

      # Make sure to set this in production
      # (see https://docs.directus.io/configuration/config-options/#general)
      # PUBLIC_URL: 'https://directus.example.com'

  db_sandwich:
    container_name: db_sandwich
    image: mariadb:latest
    env_file: ./service/.env
    volumes:
      - ./service/db:/var/lib/mysql
      - ./service/schema.sql:/docker-entrypoint-initdb.d/1.sql
      - ./service/data.sql:/docker-entrypoint-initdb.d/2.sql
    networks:
      - sandwich

  iut_adminer:
    container_name: iut_adminer
    image: adminer
    ports:
      - 8080:8080
    depends_on:
      - db_sandwich
    networks:
      - sandwich

networks:
  sandwich:
    driver: bridge
  catalogue:
    driver: bridge
